{"name": "test_menu_title", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e38ac8d16a394796d93abc62e9df8369\")>\n\n    @mark.search_movie_title\n    def test_menu_title(chrome_browser):\n        home_page = HomePage(driver=chrome_browser)\n    \n        print(colored(' Step 1: open {} ', 'blue').format(str(home_page.url)))\n        chrome_browser.get('https://www.imdb.com')\n    \n        print(colored('Step 2: Tap on first movie on opening week  ', 'blue'))\n>       home_page.menu_button.click()\n\ntest_menu.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../pages/home_page.py:48: in menu_button\n    return BaseElement(\n../pages/base_element.py:10: in __init__\n    self.find()\n../pages/base_element.py:14: in find\n    element = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e38ac8d16a394796d93abc62e9df8369\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fca9ea29820>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException"}, "attachments": [{"name": "log", "source": "558b49f1-654b-413e-8465-0f3ee27b5db9-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "525ec30b-244a-47e2-b826-a5cb320f3996-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "5ccff3a6-ba9c-4782-92e3-c47d2c362a33-attachment.txt", "type": "text/plain"}], "start": 1648329785893, "stop": 1648329801054, "uuid": "1b3edac0-71ef-440e-a11b-2ea535c42751", "historyId": "94834116a6141b048df213c3a2c2e94c", "testCaseId": "91f06daace44c306913a656bb43d07d8", "fullName": "tests.test_menu#test_menu_title", "labels": [{"name": "tag", "value": "search_movie_title"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_menu"}, {"name": "host", "value": "Doringber"}, {"name": "thread", "value": "9111-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_menu"}]}